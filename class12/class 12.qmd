---
title: "class 12: RNAseq analysis"
author: "Jenny Zhou"
format: html
---

We will use DESeq2 package for today's class studying the an RNA-seq
experiment where airway smooth muscle cells were treated with
dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory
effects (Himes et al. 2014).

## Import countData and colData

the DESeq2 package expects 1) countData (counts for every transcript in
each experiment) 2) colData (metadata that describes the experimental
setup)

```{r}
metadata <-read.csv("airway_metadata.csv")
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
```

```{r}
metadata
head(counts)
```

> Q1. How many genes are in this dataset?

```{r}
nrow(counts)
```

There are 38695 genes in this dataset.

> Q2. How many 'control' cell lines do we have?

```{r}
table(metadata$dex)
```

There are 4 control cell lines.

another way:

```{r}
sum(metadata$dex == "control")
```

## Toy differential gene expression

Step1. Calculate the mean expression (counts) of each gene for control
cells

> Q3. How would you make the above code in either approach more robust?

(a) find which columns in countData are "control" samples by look into
    the dex column in metadata

```{r}
ctrl.inds <- metadata$dex == "control"
```

(b) Extract all the control columns from countData

```{r}
ctrl.counts <- counts[,ctrl.inds]
head(ctrl.counts)
```

(c) Calculate the mean of counts in each row (gene) in `ctrl.counts`.

```{r}
ctrl.mean <- rowMeans(ctrl.counts)
head(ctrl.mean)
```

Step2. Calculate the mean expression (counts) of each gene for treated
cells \> Q4. Follow the same procedure for the treated samples (i.e.
calculate the mean per gene across drug treated samples and assign to a
labeled vector called treated.mean)

```{r}
treated.counts <- counts[,metadata$dex == "treated"]
treated.mean <- rowMeans(treated.counts)
head(treated.mean)
```

We now have control and treated mean values. For ease of book-keeping I
will combine these vectors into a data.frame called `meancounts`

```{r}
meancounts <- data.frame(ctrl.mean, treated.mean)

head(meancounts)
```

> Q5 (a). Create a scatter plot showing the mean of the treated samples
> against the mean of the control samples.

```{r}
plot(meancounts)
```

> Q5 (b).You could also use the ggplot2 package to make this figure
> producing the plot below. What geom\_?() function would you use for
> this plot?

```{r}
library(ggplot2)
```

```{r}
ggplot(meancounts) + 
  aes(ctrl.mean, treated.mean) +
  geom_point() 
```

> Q6. Try plotting both axes on a log scale. What is the argument to
> plot() that allows you to do this?

log = "xy" argument allows us to plot with log scale on both x and y
axis.

```{r}
plot(meancounts, log = "xy", xlab = "log Control", ylab = "log Treated")
```

```{r}
ggplot(meancounts) + 
  aes(ctrl.mean, treated.mean) +
  geom_point() +
  scale_x_log10() + scale_y_log10()
```

We will use log2 scale for skewed data because we really care most about
relative changes in magnitude.

We most often use log2 as our transform because the math is easier to
interpret than log10 and ln.

If we have no fold change (ratio = 1) bewteen the gene expressions of
control and treated samples, we will have log2(1) = 0.

If we have 2 fold change, log2(2) = +1. If we have 1/2 fold change,
log2(1/2) = -1.

```{r}
log10(2)
log2(1/2)
log10(1/2)
```

Let's calculate the log2 fold change between treated vs. control, and
add it to the `meancounts` data.frame

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean / meancounts$ctrl.mean)

head(meancounts)
```

Positive log2fc means gene expression is upregulated after treatment.

> Q8. Using the up.ind vector above can you determine how many up
> regulated genes we have at the greater than 2 fc level?

```{r}
sum(meancounts$log2fc >= 2, na.rm = TRUE)
```

There are 1910 upregulated genes with a fc level \>2.

> Q9. Using the down.ind vector above can you determine how many down
> regulated genes we have at the greater than 2 fc level?

```{r}
sum(meancounts$log2fc <= -2, na.rm = TRUE)
```

There are 2330 downregulated genes with a fc level \>2.

> Q10. Do you trust these results? Why or why not?

We do not trust these results because we don't know if the fold change
is significant or not.

## DESeq2 analysis

We also need to test if these fold changes significant.

To do this properly we will turn to the `DESeq2` package.

```{r}
#I message: false
library(DESeq2)
```

To use DESeq we need our imput count Data and colData in a specific
format that DESeq wants:

```{r}
dds <-  DESeqDataSetFromMatrix(countData = counts, 
                             colData = metadata, 
                             design = ~dex)
```

To run the analysis I can now use the main DESeq2 function called
`DESeq2` with `dds`as input.

```{r}

dds <- DESeq(dds)
```

To get the results back from this `dds` object we can use the
`results()` function from the package.

```{r}
res <- results(dds)
res
```

## Add Annotation

Our result table so far only contains the Ensembl gene IDs. However,
alternative gene names and extra annotation are usually required for
informative interpretation of our results. In this section we will add
this necessary annotation data to our results.

```{r}
library("AnnotationDbi")

library("org.Hs.eg.db")
# The later of these is is the organism annotation package (“org”) for Homo sapiens (“Hs”), organized as an AnnotationDbi database package (“db”), using Entrez Gene IDs (“eg”) as primary key. 
```

To get a list of all available key types that we can use to map between
(different language it speaks), use the `columns()` function

```{r}
columns(org.Hs.eg.db)
```

totally 26 databases

We can use the `mapIds()` function to add individual columns to our
results table.

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames is ENSEMBL ID
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first") #  what to do if there are multiple possible values for a single input value. Here we ask to just give us back the first one that occurs in the database.
```

> Q11. Run the mapIds() function two more times to add the Entrez ID and
> UniProt accession and GENENAME as new columns called
> res$entrez, res$uniprot and res\$genename.

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                  keys=row.names(res),
                     keytype="ENSEMBL",
                     column="ENTREZID",
                     multiVals="first")
```

```{r}
# Protein database Uniprot
res$uniprot <- mapIds(org.Hs.eg.db,
                  keys=row.names(res),
                     keytype="ENSEMBL",
                     column="UNIPROT",
                     multiVals="first")
```

```{r}
res$genename <- mapIds(org.Hs.eg.db,
                  keys=row.names(res),
                     keytype="ENSEMBL",
                     column="GENENAME",
                     multiVals="first")
```

```{r}
head(res)
```

Turn the data.frame into csv file:

```{r}
write.csv(res, file = "DESeq_results.csv")
```

## Data Visualization

Let's make a final volcano plot of log2 fold change vs. adjusted
p-value.

```{r}
plot(res$log2FoldChange,res$padj)
```

Since we care about low p-value data and we are lost in the skewed plot
above. Lets take the negative log of adjusted p-value.

```{r}
plot(res$log2FoldChange,-log(res$padj))

#add verticle line at x=-2 and +2 as log 2 fold change threshold
abline(v=c(-2,+2), col = "red")

#add a horizontal line at =log(0.05) to show adj. p-value threshold.
abline(h=-log(0.05), col = "red")

```

```{r}
#make a color vector to highlight the genes we care about
my.col <- rep("grey", nrow(res))

my.col[res$log2FoldChange>=2] <- "blue"
my.col[res$log2FoldChange<=-2] <- "red"
my.col[res$padj > 0.05] <- "grey"


plot(res$log2FoldChange,-log(res$padj), col = my.col)

#add vertical line at x=-2 and +2 as log 2 fold change threshold
abline(v=c(-2,+2), col = "grey")

#add a horizontal line at =log(0.05) to show adj. p-value threshold.
abline(h=-log(0.05), col = "grey")
```

## Pathway analysis

We can use the **KEGG** database of biological pathways to get some more
insight into our differentially expressed genes and the kinds of biology
they are involved in.

The KEGG pathway database, unlike GO for example, provides functional
annotation as well as information about gene products that interact with
each other in a given pathway, how they interact (e.g., activation,
inhibition, etc.), and where they interact (e.g., cytoplasm, nucleus,
etc.). Hence KEGG has the potential to provide extra insight beyond
annotation lists of simple molecular function, process etc. In this
analysis, we check for coordinated differential expression over gene
sets from KEGG pathways instead of changes of individual genes. The
assumption here is that consistent perturbations over a given pathway
(gene set) may suggest mechanistic changes.

Here we play with just one, the **GAGE** package (which stands for
Generally Applicable Gene set Enrichment), to do KEGG pathway enrichment
analysis on our RNA-seq based differential expression results.

```{r}
library(pathview)
library(gage)
library(gageData)
```

Get the KEGG databse.

```{r}
data(kegg.sets.hs)

head(kegg.sets.hs, 2)
# shows two pathways and genes (with entrez ID) that involved in this pathway
```

Get gene (Entrez ID) and their foldchange from our DESeq result
data.frame.

```{r}
# make a vector called fold changes
foldchanges <-  res$log2FoldChange

# make a vector into matrix; lable each foldchange by the gene entrenz ID
names(foldchanges) <- res$entrez
```

```{r}
head(foldchanges)
```

Run the gage pathway analysis.

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

The result returned by gage function is a named list, with either 3
elements ("greater", "less", "stats") .

```{r}
attributes(keggres)
```

Each `keggres$less` and `keggres$greater` object is data matrix with
gene sets as rows sorted by p-value. Look at the first three down (less)
pathways.

```{r}
head(keggres$less, 3)
```

Now I can use KEGG IDs ("hsa05332") of these pathways from gage yo view
our genes mapped to these pathways use`pathview()`.

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![Asthma pathway from KEGG mapped with our DESeq results](hsa05310.pathview.png)
