---
title: "Class 05: Data Visualization with GGPLOT"
author: "Jenny Zhou"
format: pdf
---

### Base R graphics vs ggplot2

There are many graphic systems available in R, including so-called "base" R graphics and the very popular **ggplot2** package.

To compare these, lets play with the inbuilt `cars` data set.

```{r}
head(cars)
```

To use "base" R I can simply call the `plot()` function:

```{r}
plot(cars)
```

To use `ggplot2`, I first need to install it with the function `install.packages("ggplot2")`.

I will run this in my R console (i.e. the R brain) as I do not want to re-install it every time I render my report.

The main function in this package is called `ggplot()`

```{r}
library(ggplot2)
ggplot()
```

To make a figure with ggplot, I need at least 3 things:

-   **data** (i.e. what I want to plot)
-   **aesthetics** (mapping of the data to the plot I want)
-   **geometry** (How I want to plot the data)

```{r}
ggplot(cars) + 
  aes(speed,dist) +
  geom_point() + 
  geom_smooth()
```

If want want to add more things I can just keep adding layers.

GGplot is much more verbose than base R plots but it has a consistent layer system that I can use to make just about any plot.

Make a plot with linear straight line:

```{r}
ggplot(cars) + 
  aes(speed,dist) +
  geom_point() + 
  geom_smooth(method='lm', se=FALSE, color='orange') +
  labs(title = 'ggplot for Stopping Distance vs. Speed of Cars',
       subtitle = 'From inbuilt dataset',
       caption = 'BIMM 143 class05',
       x= 'Speed (mpg)',
       y='Stopping Distance (ft)') +
  theme_update()
```

### Creating more complicated plot

Let's plot some gene expression data.

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes,10)
```
> Q. How many genes are in the data set?

```{r}
nrow(genes)

colnames(genes)
ncol(genes)

signif(table(genes$State)/nrow(genes)*100,2)
```

> Q. How can we summarize that last column (State)?

```{r}
table(genes$State)
```

Plot genes dataset
```{r}
ggplot(genes) +
  aes(Condition1, Condition2) +
  geom_point()
```


```{r}
p <- ggplot(genes) +
  aes (Condition1, Condition2, col=State) +
  geom_point() +
  labs(title = 'Gene Expression upon Drug Treatment',
       x='Control',
       y= 'Drug treated')

p
```


```{r}
p + scale_color_manual(values = c("red", "grey", "blue"))
```

### Going further

Here I read a slightly larger data set.
```{r}
# File location online
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
head(gapminder)
```

```{r}
library(dplyr)
```

Make a basic scatter plot
```{r}
ggplot(gapminder) +
  aes(gdpPercap, lifeExp, col=continent, size=pop) +
  geom_point(alpha = 0.4) +
  labs(x='GDP per capita',
      y='Life Expectancy')
```

A very useful layer to add sometimes is for 'facetting'.

```{r}
ggplot(gapminder) +
  aes(gdpPercap, lifeExp, col=continent, size=pop) +
  geom_point(alpha = 0.4) +
  labs(x='GDP per capita',
      y='Life Expectancy') +
  facet_wrap(~year)
```

## Bar charts

data:
```{r}
gapminder_top5 <- gapminder %>% 
  filter(year==2007) %>% 
  arrange(desc(pop)) %>% 
  top_n(5, pop)

gapminder_top5
```
```{r}
ggplot(gapminder_top5) + geom_col(aes(country,pop))
```
Create a bar chart showing the life expectancy of the five biggest countries by population in 2007.
```{r}
ggplot(gapminder_top5) + 
  aes(country,lifeExp, fill = gdpPercap) +
  geom_col()
```